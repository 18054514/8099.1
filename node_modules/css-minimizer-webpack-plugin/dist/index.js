"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _os = _interopRequireDefault(require("os"));

var _sourceMap = require("source-map");

var _webpackSources = require("webpack-sources");

var _RequestShortener = _interopRequireDefault(require("webpack/lib/RequestShortener"));

var _webpack = require("webpack");

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _serializeJavascript = _interopRequireDefault(require("serialize-javascript"));

var _package = _interopRequireDefault(require("cssnano/package.json"));

var _pLimit = _interopRequireDefault(require("p-limit"));

var _jestWorker = _interopRequireDefault(require("jest-worker"));

var _options = _interopRequireDefault(require("./options.json"));

var _minify = require("./minify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const warningRegex = /\s.+:+([0-9]+):+([0-9]+)/;

class CssMinimizerPlugin {
  constructor(options = {}) {
    (0, _schemaUtils.default)(_options.default, options, {
      name: 'Css Minimizer Plugin',
      baseDataPath: 'options'
    });
    const {
      minify,
      minimizerOptions = {
        preset: 'default'
      },
      test = /\.css(\?.*)?$/i,
      warningsFilter = () => true,
      sourceMap = false,
      cache = true,
      cacheKeys = defaultCacheKeys => defaultCacheKeys,
      parallel = true,
      include,
      exclude
    } = options;
    this.options = {
      test,
      warningsFilter,
      sourceMap,
      cache,
      cacheKeys,
      parallel,
      include,
      exclude,
      minify,
      minimizerOptions
    };

    if (this.options.sourceMap === true) {
      this.options.sourceMap = {
        inline: false
      };
    }
  }

  static isSourceMap(input) {
    // All required options for `new SourceMapConsumer(...options)`
    // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap
    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === 'string');
  }

  static buildError(error, file, sourceMap, requestShortener) {
    if (error.line) {
      const original = sourceMap && sourceMap.originalPositionFor({
        line: error.line,
        column: error.column
      });

      if (original && original.source && requestShortener) {
        return new Error(`${file} from Css Minimizer Webpack Plugin\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.column}]${error.stack ? `\n${error.stack.split('\n').slice(1).join('\n')}` : ''}`);
      }

      return new Error(`${file} from Css Minimizer \n${error.message} [${file}:${error.line},${error.column}]${error.stack ? `\n${error.stack.split('\n').slice(1).join('\n')}` : ''}`);
    }

    if (error.stack) {
      return new Error(`${file} from Css Minimizer\n${error.stack}`);
    }

    return new Error(`${file} from Css Minimizer\n${error.message}`);
  }

  static buildWarning(warning, file, sourceMap, requestShortener, warningsFilter) {
    let warningMessage = warning;
    let locationMessage = '';
    let source;

    if (sourceMap) {
      const match = warningRegex.exec(warning);

      if (match) {
        const line = +match[1];
        const column = +match[2];
        const original = sourceMap.originalPositionFor({
          line,
          column
        });

        if (original && original.source && original.source !== file && requestShortener) {
          ({
            source
          } = original);
          warningMessage = `${warningMessage.replace(warningRegex, '')}`;
          locationMessage = `${requestShortener.shorten(original.source)}:${original.line}:${original.column}`;
        }
      }
    }

    if (warningsFilter && !warningsFilter(warning, file, source)) {
      return null;
    }

    return `Css Minimizer Plugin: ${warningMessage} ${locationMessage}`;
  }

  static isWebpack4() {
    return _webpack.version[0] === '4';
  }

  static getAvailableNumberOfCores(parallel) {
    // In some cases cpus() returns undefined
    // https://github.com/nodejs/node/issues/19022
    const cpus = _os.default.cpus() || {
      length: 1
    };
    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);
  }

  *taskGenerator(compiler, compilation, file) {
    const assetSource = compilation.assets[file];
    let input;
    let inputSourceMap; // TODO refactor after drop webpack@4, webpack@5 always has `sourceAndMap` on sources

    if (this.options.sourceMap && assetSource.sourceAndMap) {
      const {
        source,
        map
      } = assetSource.sourceAndMap();
      input = source;

      if (map) {
        if (CssMinimizerPlugin.isSourceMap(map)) {
          inputSourceMap = map;
        } else {
          inputSourceMap = map;
          compilation.warnings.push(new Error(`${file} contains invalid source map`));
        }
      }
    } else {
      input = assetSource.source();
      inputSourceMap = null;
    }

    if (Buffer.isBuffer(input)) {
      input = input.toString();
    }

    const callback = taskResult => {
      const {
        css: code,
        error,
        map,
        warnings
      } = taskResult;
      let sourceMap = null;

      if ((error || warnings && warnings.length > 0) && inputSourceMap && CssMinimizerPlugin.isSourceMap(inputSourceMap)) {
        sourceMap = new _sourceMap.SourceMapConsumer(inputSourceMap);
      } // Handling results
      // Error case: add errors, and go to next file


      if (error) {
        compilation.errors.push(CssMinimizerPlugin.buildError(error, file, sourceMap, new _RequestShortener.default(compiler.context)));
        return;
      }

      let outputSource;

      if (map) {
        outputSource = new _webpackSources.SourceMapSource(code, file, map, input, inputSourceMap, true);
      } else {
        outputSource = new _webpackSources.RawSource(code);
      } // Updating assets
      // eslint-disable-next-line no-param-reassign


      compilation.assets[file] = outputSource; // Handling warnings

      if (warnings && warnings.length > 0) {
        warnings.forEach(warning => {
          const builtWarning = CssMinimizerPlugin.buildWarning(warning, file, sourceMap, new _RequestShortener.default(compiler.context), this.options.warningsFilter);

          if (builtWarning) {
            compilation.warnings.push(builtWarning);
          }
        });
      }
    };

    const task = {
      file,
      input,
      inputSourceMap,
      map: this.options.sourceMap,
      minimizerOptions: this.options.minimizerOptions,
      minify: this.options.minify,
      callback
    };

    if (CssMinimizerPlugin.isWebpack4()) {
      const {
        outputOptions: {
          hashSalt,
          hashDigest,
          hashDigestLength,
          hashFunction
        }
      } = compilation;

      const hash = _webpack.util.createHash(hashFunction);

      if (hashSalt) {
        hash.update(hashSalt);
      }

      hash.update(input);
      const digest = hash.digest(hashDigest);

      if (this.options.cache) {
        const defaultCacheKeys = {
          cssMinimizer: _package.default.version,
          // eslint-disable-next-line global-require
          'css-minimizer-webpack-plugin': require('../package.json').version,
          'css-minimizer-webpack-plugin-options': this.options,
          nodeVersion: process.version,
          filename: file,
          contentHash: digest.substr(0, hashDigestLength)
        };
        task.cacheKeys = this.options.cacheKeys(defaultCacheKeys, file);
      }
    } else {
      // For webpack@5 cache
      task.assetSource = assetSource;
      task.cacheKeys = {
        cssMinimizer: _package.default.version,
        // eslint-disable-next-line global-require
        'css-minimizer-webpack-plugin': require('../package.json').version,
        'css-minimizer-webpack-plugin-options': this.options
      };
    }

    yield task;
  } // eslint-disable-next-line class-methods-use-this


  async runTasks(assetNames, getTaskForAsset, cache) {
    const availableNumberOfCores = CssMinimizerPlugin.getAvailableNumberOfCores(this.options.parallel);
    let concurrency = Infinity;
    let worker;

    if (availableNumberOfCores > 0) {
      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory
      const numWorkers = Math.min(assetNames.length, availableNumberOfCores);
      concurrency = numWorkers;
      worker = new _jestWorker.default(require.resolve('./minify'), {
        numWorkers
      }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081

      const workerStdout = worker.getStdout();

      if (workerStdout) {
        workerStdout.on('data', chunk => {
          return process.stdout.write(chunk);
        });
      }

      const workerStderr = worker.getStderr();

      if (workerStderr) {
        workerStderr.on('data', chunk => {
          return process.stderr.write(chunk);
        });
      }
    }

    const limit = (0, _pLimit.default)(concurrency);
    const scheduledTasks = [];

    for (const assetName of assetNames) {
      const enqueue = async task => {
        let taskResult;

        try {
          if (worker) {
            taskResult = await worker.transform((0, _serializeJavascript.default)(task));
          } else {
            taskResult = await (0, _minify.minify)(task);
          }
        } catch (error) {
          taskResult = {
            error
          };
        }

        if (cache.isEnabled() && !taskResult.error) {
          await cache.store(task, taskResult);
        }

        task.callback(taskResult);
        return taskResult;
      };

      scheduledTasks.push(limit(async () => {
        const task = getTaskForAsset(assetName).next().value;

        if (!task) {
          // Something went wrong, for example the `cacheKeys` option throw an error
          return Promise.resolve();
        }

        if (cache.isEnabled()) {
          let taskResult;

          try {
            taskResult = await cache.get(task);
          } catch (ignoreError) {
            return enqueue(task);
          }

          task.callback(taskResult);
          return Promise.resolve();
        }

        return enqueue(task);
      }));
    }

    await Promise.all(scheduledTasks);

    if (worker) {
      await worker.end();
    }
  }

  apply(compiler) {
    const {
      devtool,
      plugins
    } = compiler.options;
    this.options.sourceMap = typeof this.options.sourceMap === 'undefined' ? devtool && !devtool.includes('eval') && !devtool.includes('cheap') && (devtool.includes('source-map') || // Todo remove when `webpack@4` support will be dropped
    devtool.includes('sourcemap')) || plugins && plugins.some(plugin => plugin instanceof _webpack.SourceMapDevToolPlugin && plugin.options && plugin.options.columns) : this.options.sourceMap;

    const matchObject = _webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined
    undefined, this.options);

    const optimizeFn = async (compilation, chunksOrAssets) => {
      const assetNames = Object.keys(CssMinimizerPlugin.isWebpack4() ? compilation.assets : chunksOrAssets).filter(file => matchObject(file));

      if (assetNames.length === 0) {
        return Promise.resolve();
      }

      const getTaskForAsset = this.taskGenerator.bind(this, compiler, compilation);
      const CacheEngine = CssMinimizerPlugin.isWebpack4() ? // eslint-disable-next-line global-require
      require('./Webpack4Cache').default : // eslint-disable-next-line global-require
      require('./Webpack5Cache').default;
      const cache = new CacheEngine(compilation, {
        cache: this.options.cache
      });
      await this.runTasks(assetNames, getTaskForAsset, cache);
      return Promise.resolve();
    };

    const plugin = {
      name: this.constructor.name
    };
    compiler.hooks.compilation.tap(plugin, compilation => {
      if (this.options.sourceMap) {
        compilation.hooks.buildModule.tap(plugin, moduleArg => {
          // to get detailed location info about errors
          // eslint-disable-next-line no-param-reassign
          moduleArg.useSourceMap = true;
        });
      }

      if (CssMinimizerPlugin.isWebpack4()) {
        compilation.hooks.optimizeChunkAssets.tapPromise(plugin, optimizeFn.bind(this, compilation));
      } else {
        compilation.hooks.optimizeAssets.tapPromise(plugin, optimizeFn.bind(this, compilation));
      }
    });
  }

}

var _default = CssMinimizerPlugin;
exports.default = _default;